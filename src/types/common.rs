use super::attachments;
use serde::{Deserialize, Serialize};

#[derive(Debug, Serialize, Deserialize)]
#[serde(untagged)]
pub enum StringOrNumber<Number> {
    String(String),
    Number(Number),
}

// types are references from:
// https://docs.invidious.io/api/common_types/

/*
* ImageObject
* {
*     "url": String,
*     "width": Number, // Integer
*     "height": Number // Integer
* }
*/
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct ImageObject {
    pub url: String,
    pub width: u64,
    pub height: u64,
}

/*
* ThumbnailObject
* {
*     "quality": String,
*    "url": String,
*     "width": Number, // Integer
*     "height": Number // Integer
* }
*/
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct ThumbnailObject {
    pub quality: String,
    pub url: String,
    pub width: u64,
    pub height: u64,
}

/*
* VideoObject
* {
*    "type": "video", // Constant
*     "title": String,
*     "videoId": String* ,
*
*     "author": String,
*     "authorId": String,
*     "authorUrl": String,
*     "authorVerified": Boolean,
*
*     "videoThumbnails": [
*         // One or more ThumbnailObject
*     ],
*
*     "description": String,
*     "descriptionHtml": String* * * * * ,
*
*     "viewCount": Number, // Integer
*     "viewCountText": String,
*     "lengthSeconds": Number, // Intege* r

*     "published": Number, // Unix timestamp
*     "publishedText": String,
*
*     // Only available on premiered videos
*     "premiereTimestamp": Number, // Unix timestamp

*    "liveNow": Boolean,
*     "premium": Boolean,
*     "isUpcoming": Boolean
* }
*/
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct VideoObject {
    #[serde(rename = "type")]
    pub o_type: String, // will always be "video",

    pub title: String,
    pub video_id: String,

    pub video_thumbnails: Vec<ThumbnailObject>,

    pub description: String,
    pub description_html: String,

    pub view_count: u128,
    pub view_count_text: String,
    pub length_seconds: u128,

    pub published: i64,
    pub published_text: String,

    pub premiere_timestamp: i64,

    pub live_now: bool,
    pub premium: bool,
    pub is_upcoming: bool,
}
/*
* ChannelObject
* {
*     "type": "channel", // Constant

*     "author": String,
*     "authorId": String,
*     "authorUrl": String,
*     "authorVerified": Boolean,
*     "authorThumbnails": [
*         // One or more ThumbnailObject
*     ],
*
*     "autoGenerated": Boolean,
*     "subCount": Number, // Integer
*     "videoCount": Number, // Integer
*
*     "description": String,
*     "descriptionHtml": String,
* }
*/
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct ChannelObject {
    #[serde(rename = "type")]
    pub o_type: String, // will always be "channel",

    pub author: String,
    pub author_id: String,
    pub author_url: String,
    pub author_verified: bool,
    pub author_thumbnails: Vec<ThumbnailObject>,

    pub auto_generated: bool,
    pub sub_count: u64,
    pub video_count: u64,

    pub description: String,
    pub description_html: String,
}

#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct PlaylistVideoObject {
    pub title: String,
    pub video_id: String,
    pub length_seconds: u64,
    pub video_thumbnails: Vec<ThumbnailObject>,
}

/*
* PlaylistObject
* {
*     "type": "playlist", // Constant
*
*     "title": String,
*     "playlistId": String,
*     "playlistThumbnail": String,

*     "author": String,
*     "authorId": String,
*     "authorUrl": String,
*     "authorVerified": Boolean,
*
*     "videoCount": Number, // Integer
*     "videos": [
*         {
*             "title": String,
*             "videoId": String,
*             "lengthSeconds": Number, // Integer
*             "videoThumbnails": [
*                 // One or more ThumbnailObject
*             ]
*         }
*     ]
* }
*/
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct PlaylistObject {
    #[serde(rename = "type")]
    pub o_type: String, // will always be "playlist",

    pub title: String,
    pub playlist_id: String,
    pub playlist_thumbnail: String,

    pub author: String,
    pub author_id: String,
    pub author_url: String,
    pub author_verified: bool,

    pub video_count: u64,
    pub videos: Vec<PlaylistVideoObject>,
}

/*
CommentInfo
{
  "commentCount": Int32?,
  "videoId": String,
  "comments": [
    {
      "author": String,
      "authorThumbnails": [
        {
          "url": String,
          "width": Int32,
          "height": Int32
        }
      ],
      "authorId": String,
      "authorUrl": String,

      "isEdited": Boolean,
      "isPinned": Boolean,

      "content": String,
      "contentHtml": String,
      "published": Int64,
      "publishedText": String,
      "likeCount": Int32,
      "commentId": String,
      "authorIsChannelOwner": Bool,
      "creatorHeart": {
        "creatorThumbnail": String,
        "creatorName": String
      }?,
      "replies": {
        "replyCount": Int32,
        "continuation": String
      }?
    }
  ],
  "continuation": String?
}
*/

#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct CommentInfo {
    comment_count: Option<i32>,
    video_id: String,
    comments: Vec<CommentUnit>,
    continuation: Option<String>,
}

#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct CommentUnit {
    pub author: String,
    pub author_thumbnails: Vec<ImageObject>,
    pub author_id: String,
    pub author_url: String,

    pub is_edited: bool,
    pub is_pinned: bool,

    pub content: String,
    pub content_html: String,
    pub published: i64,
    pub published_text: String,
    pub like_count: i32,
    pub comment_id: String,
    pub author_is_channel_owner: bool,
    pub creator_heart: Option<CommentHeart>,
    pub replies: Option<CommentReplies>,

    pub continuation: Option<String>,
}

#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct CommentHeart {
    pub creator_thumbnail: String,
    pub creator_name: String,
}

#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct CommentReplies {
    pub reply_count: i32,
    pub continuation: String,
}

/*
CaptionInfo
{
  "captions": [
    {
      "label": String,
      "languageCode": String,
      "url": String
    }
  ]
}
*/
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct CaptionInfo {
    pub captions: Vec<CaptionUnit>,
}

#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct CaptionUnit {
    pub label: String,
    pub language_code: String,
    pub url: String,
}

/*
ChannelComment
{
  "authorId": String,
  "comments": [
    {
      "author": String,
      "authorThumbnails": [
        "url": String,
        "width": Int32,
        "height": Int32
      ],
      "authorId": String,
      "authorUrl": String,
      "isEdited": Bool,
      "content": String,
      "contentHtml": String,
      "published": Int64,
      "publishedText": String,
      "likeCount": Int32,
      "commentId": String,
      "authorIsChannelOwner": Bool,
      "creatorHeart": {
        "creatorThumbnail": String,
        "creatorName": String
      }?,
      "replies": {
        "replyCount": Int32,
        "continuation": String
      }?,
      "attachment": Attachment?
    }
  ],
  "continuation": String?
}
*/
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct ChannelComment {
    pub author: String,
    pub author_thumbnails: Vec<ImageObject>,
    pub author_id: String,
    pub author_url: String,
    pub is_edited: bool,
    pub content: String,
    pub content_html: String,
    pub published: i64,
    pub published_text: String,
    pub like_count: i32,
    pub comment_id: String,
    pub author_is_channel_owner: bool,
    pub creator_heart: Option<CommentHeart>,
    pub replies: Option<CommentReplies>,
    pub attachment: Option<attachments::Attachment>,
}

#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct ChannelComments {
    pub author_id: String,
    pub comments: Vec<ChannelComment>,
    pub continuation: Option<String>,
}

/// simple error in format of:
/// ```json
/// { error: "Some error message here" }
/// ````
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct SimpleError {
    error: String,
}

#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub enum ContentCategory {
    Music,
    Gaming,
    News,
    Movies,
}

impl ContentCategory {
    pub fn as_str(&self) -> &'static str {
        match self {
            Self::Music => "music",
            Self::Gaming => "gaming",
            Self::News => "news",
            Self::Movies => "movies",
        }
    }
}

/// Sort comments
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub enum CommentSorting {
    Top,
    New,
}

impl CommentSorting {
    pub fn as_str(&self) -> &'static str {
        match self {
            Self::Top => "top",
            Self::New => "new",
        }
    }
}

/// Comment source
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub enum CommentSource {
    Youtube,
    Reddit,
}

impl CommentSource {
    pub fn as_str(&self) -> &'static str {
        match self {
            Self::Reddit => "reddit",
            Self::Youtube => "youtube",
        }
    }
}

#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct SearchSuggestion {
    pub query: String,
    pub suggestions: Vec<String>,
}
